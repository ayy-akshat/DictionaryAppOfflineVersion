{"version":3,"sources":["dictionaryDatabase.js","App.js"],"names":["dictionary","App","getDefinition","word","w","toLowerCase","i","length","indexOf","replace","wordStuff","db","type","lexicalCategory","definition","setState","wordInfo","loadState","state","wordInput","allWords","push","this","View","style","styles","container","header","Text","headerTxt","inputAndBtnContainer","TextInput","placeholder","onChangeText","text","TouchableOpacity","defineBtn","onPress","r","wordDefinitionContainer","wordDefTxtTitle","wordDefSection","wordDefTxtContent","map","key","Component","StyleSheet","create","backgroundColor","alignItems","width","height","alignContent","justifyContent","marginBottom","textAlign","fontSize","color","maxWidth","borderWidth","borderColor","borderRadius","padding","marginVertical","fontWeight","pronounceBtn","marginTop","pronounceBtnTxt"],"mappings":"qQAqDiBA,EArDE,CACf,IAAQ,CACN,KAAS,MACT,gBAAkB,aAClB,WAAe,8FAEjB,MAAU,CACR,KAAS,QACT,gBAAkB,OAClB,WAAc,qWAEhB,WAAe,CACb,KAAS,aACT,gBAAkB,SAClB,WAAe,0EAEjB,MAAU,CACR,KAAS,QACT,gBAAkB,eAClB,WAAe,2DAEjB,QAAY,CACV,KAAS,UACT,gBAAkB,OAClB,WAAe,6CAEjB,OAAW,CACT,KAAS,SACT,gBAAkB,SAClB,WAAe,0BAEjB,IAAQ,CACN,KAAS,MACT,gBAAkB,UAClB,WAAe,8FAEjB,KAAS,CACP,KAAS,OACT,gBAAkB,OAClB,WAAe,oKAEjB,UAAc,CACZ,KAAS,YACT,gBAAkB,YAClB,WAAe,0EAEjB,SAAa,CACX,KAAS,WACT,gBAAkB,YAClB,WAAe,oD,+aC5CrB,IAQqBC,E,gCAEnB,aACC,IAAD,sBACE,gBAiJFC,cAAgB,SAACC,GAEf,IAAIC,EAAID,EACRC,EAAIA,EAAEC,cACN,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAEG,OAAQD,KAEuB,GAA/C,6BAA6BE,QAAQJ,EAAEE,MAEzCF,EAAIA,EAAEK,QAAQL,EAAEE,GAAI,IACpBA,KAIJ,GAAS,YAALF,EAAJ,CAMA,IAAIM,EAAYC,EAAGP,GAEnB,GAAKM,EAAL,CAOIP,EAAOO,EAAUP,KAArB,IACIS,EAAOF,EAAUG,gBACjBC,EAAaJ,EAAUI,WAG3B,EAAKC,SAAS,CACZC,SAAU,CACRb,KAAMA,EACNS,KAAMA,EACNE,WAAYA,GAEdG,UAjME,SAiLF,EAAKF,SAAS,CAACE,UAhLV,SAwKL,EAAKF,SAAS,CAACE,UAvKV,KAQP,EAAKC,MAAQ,CAACF,SAAU,GAAIC,UAAW,EAAGE,UAAW,IAFvD,E,6CAKA,WAEE,IAAIC,EAAW,GACf,IAAK,IAAIhB,KAAKO,EAEZS,EAASC,KAAKjB,GAEhBkB,KAAKP,SAAS,CAACK,SAAUA,M,oBAG3B,WACC,IAAD,OACE,OACE,kBAACG,EAAA,EAAD,CAAMC,MAAOC,EAAOC,WAClB,kBAACH,EAAA,EAAD,CAAMC,MAAOC,EAAOE,QAClB,kBAACC,EAAA,EAAD,CAAMJ,MAAOC,EAAOI,WAApB,2BAKF,kBAACN,EAAA,EAAD,CAAMC,MAAOC,EAAOK,sBAClB,kBAACC,EAAA,EAAD,CACAC,YAAY,eACZR,MAAOC,EAAON,UACdc,aAAc,SAACC,GAAQ,EAAKnB,SAAS,CAACI,UAAWe,OAEjD,kBAACC,EAAA,EAAD,CAAkBX,MAAOC,EAAOW,UAAWC,QAAS,WAAO,EAAKnC,cAAc,EAAKgB,MAAMC,aACvF,kBAACS,EAAA,EAAD,iBAOD,WAEC,IAAIU,EACJ,OAAQ,EAAKpB,MAAMD,WACjB,KArDP,EAsDSqB,EACE,kBAACf,EAAA,EAAD,CAAMC,MAAOC,EAAOc,yBAClB,kBAACX,EAAA,EAAD,CAAMJ,MAAOC,EAAOe,iBAApB,uDAKJ,MAEF,KA9DJ,EA+DMF,EACE,kBAACf,EAAA,EAAD,CAAMC,MAAOC,EAAOc,yBAClB,kBAACX,EAAA,EAAD,CAAMJ,MAAOC,EAAOe,iBAApB,eAKJ,MAEF,KAvEN,EAwEQF,EACE,kBAACf,EAAA,EAAD,CAAMC,MAAOC,EAAOc,yBAElB,kBAAChB,EAAA,EAAD,CAAMC,MAAOC,EAAOgB,gBAClB,kBAACb,EAAA,EAAD,CAAMJ,MAAOC,EAAOe,iBAApB,QAGA,kBAACZ,EAAA,EAAD,CAAMJ,MAAOC,EAAOiB,mBACjB,EAAKxB,MAAMF,SAASb,OAIzB,kBAACoB,EAAA,EAAD,CAAMC,MAAOC,EAAOgB,gBAClB,kBAACb,EAAA,EAAD,CAAMJ,MAAOC,EAAOe,iBAApB,QAGA,kBAACZ,EAAA,EAAD,CAAMJ,MAAOC,EAAOiB,mBACnB,EAAKxB,MAAMF,SAASJ,OAIvB,kBAACW,EAAA,EAAD,CAAMC,MAAOC,EAAOgB,gBAClB,kBAACb,EAAA,EAAD,CAAMJ,MAAOC,EAAOe,iBAApB,cAGA,kBAACZ,EAAA,EAAD,CAAMJ,MAAOC,EAAOiB,mBACnB,EAAKxB,MAAMF,SAASF,cAM3B,MAEF,KAzGH,EA0GKwB,EACE,kBAACf,EAAA,EAAD,CAAMC,MAAOC,EAAOc,yBAClB,kBAACX,EAAA,EAAD,CAAMJ,MAAOC,EAAOe,iBAApB,qCAGA,kBAACZ,EAAA,EAAD,CAAMJ,MAAOC,EAAOiB,mBAApB,qEAKJ,MAEF,KArHH,EAsHKJ,EACE,kBAACf,EAAA,EAAD,CAAMC,MAAOC,EAAOc,yBAClB,kBAACX,EAAA,EAAD,CAAMJ,MAAOC,EAAOe,iBAApB,oCAGA,kBAACZ,EAAA,EAAD,CAAMJ,MAAOC,EAAOiB,mBACjB,EAAKxB,MAAME,SAASuB,KAAI,SAACrC,GAAD,OACvB,kBAACsB,EAAA,EAAD,CAAMgB,IAAK,YAActC,EAAGkB,MAAOC,EAAOiB,mBACvC,MAAQpC,EAAI,WAOvB,MAEF,QACEgC,EACE,kBAACf,EAAA,EAAD,CAAMC,MAAOC,EAAOc,yBAClB,kBAACX,EAAA,EAAD,CAAMJ,MAAOC,EAAOe,iBAApB,uDAOR,OAAOF,EApGR,Q,GA1CsBO,aAkM3BpB,EAASqB,IAAWC,OAAO,CAC/BrB,UAAW,CACTsB,gBAAiB,OACjBC,WAAY,UAEdtB,OAAQ,CACNuB,MAAO,OACPC,OAAQ,IACRC,aAAc,SACdH,WAAY,SACZI,eAAgB,SAChBC,aAAc,GACdN,gBAAiB,QAEnBnB,UAAW,CACT0B,UAAW,SACXC,SAAU,GACVC,MAAO,SAET3B,qBAAsB,CACpBmB,WAAY,SACZC,MAAO,IACPQ,SAAU,MACVJ,aAAc,IAEhBnC,UAAW,CACTwC,YAAa,EACbC,YAAa,OACbV,MAAO,OACPK,UAAW,SACXJ,OAAQ,GACRG,aAAc,GACdO,aAAc,GAEhBzB,UAAW,CACTuB,YAAa,EACbC,YAAa,QACbV,MAAO,MACPD,WAAY,SACZE,OAAQ,GACRE,eAAgB,SAChBQ,aAAc,GAEhBtB,wBAAyB,CACvBW,MAAO,IACPQ,SAAU,MACVC,YAAa,EACbE,aAAc,GACdD,YAAa,OACbE,QAAS,IAEXrB,eAAgB,CACdS,MAAO,OACPG,eAAgB,gBAChBU,eAAgB,IAElBvB,gBAAiB,CACfiB,MAAO,UACPO,WAAY,OACZR,SAAU,IAEZd,kBAAmB,CACjBe,MAAO,OACPO,WAAY,OACZR,SAAU,IAEZS,aAAc,CACZjB,gBAAiB,UACjBE,MAAO,IACPC,OAAQ,IACRO,SAAU,MACVG,aAAc,GACdK,UAAW,EACXjB,WAAY,SACZI,eAAgB,UAElBc,gBAAiB,CACfV,MAAO,QACPO,WAAY,OACZR,SAAU,GACVD,UAAW,a","file":"static/js/app.8b762e34.chunk.js","sourcesContent":["const dictionary = {\n    \"the\" : {\n      \"word\" : \"the\",\n      \"lexicalCategory\":\"Determiner\",\n      \"definition\" : \"denoting one or more people or things already mentioned or assumed to be common knowledge.\"\n    },\n    \"india\" : {\n      \"word\" : \"India\",\n      \"lexicalCategory\":\"Noun\",\n      \"definition\" :\"a country in southern Asia occupying the greater part of the Indian subcontinent; population 1,311,000,000 (estimated 2015); official languages, Hindi and English (fourteen other languages are recognized as official in certain regions; of these, Bengali, Gujarati, Marathi, Tamil, Telugu, and Urdu have most first-language speakers); capital, New Delhi.\"\n    },\n    \"externally\" : {\n      \"word\" : \"externally\",\n      \"lexicalCategory\":\"Adverb\",\n      \"definition\" : \"with reference to the outer surface or structure of something; outside\"\n    },\n    \"hello\" : {\n      \"word\" : \"hello\",\n      \"lexicalCategory\":\"Interjection\",\n      \"definition\" : \"used as a greeting or to begin a telephone conversation\"\n    },\n    \"welcome\" : {\n      \"word\" : \"welcome\",\n      \"lexicalCategory\":\"Noun\",\n      \"definition\" : \"an instance or manner of greeting someone\"\n    },\n    \"almost\" : {\n      \"word\" : \"almost\",\n      \"lexicalCategory\":\"Adverb\",\n      \"definition\" : \"not quite; very nearly\"\n    },\n    \"she\" : {\n      \"word\" : \"she\",\n      \"lexicalCategory\":\"Pronoun\",\n      \"definition\" : \"used to refer to a woman, girl, or female animal previously mentioned or easily identified\"\n    },\n    \"tree\" : {\n      \"word\" : \"tree\",\n      \"lexicalCategory\":\"Noun\",\n      \"definition\" : \"a woody perennial plant, typically having a single stem or trunk growing to a considerable height and bearing lateral branches at some distance from the ground.\"\n    },\n    \"wonderful\" : {\n      \"word\" : \"wonderful\",\n      \"lexicalCategory\":\"Adjective\",\n      \"definition\" : \"inspiring delight, pleasure, or admiration; extremely good; marvellous\"\n    },\n    \"ordinary\" : {\n      \"word\" : \"ordinary\",\n      \"lexicalCategory\":\"Adjective\",\n      \"definition\" : \"with no special or distinctive features; normal\"\n    }\n  }\n  \n  export default dictionary;","import React, { Component } from 'react';\nimport { StyleSheet, Text, View, TextInput, TouchableOpacity } from 'react-native';\nimport { Audio } from 'expo-av';\nimport db from './dictionaryDatabase';\n\nconst\nIDLE = 0,\nLOADING = 1,\nFOUND = 2,\nNOTFOUND = 3,\nALLWORDS = 4;\n\n\nexport default class App extends Component\n{\n  constructor()\n  {\n    super();\n    this.state = {wordInfo: {}, loadState: 0, wordInput: \"\"};\n  }\n\n  componentDidMount()\n  {\n    var allWords = []\n    for (var w in db)\n    {\n      allWords.push(w);\n    }\n    this.setState({allWords: allWords});\n  }\n\n  render()\n  {\n    return (\n      <View style={styles.container}>\n        <View style={styles.header}>\n          <Text style={styles.headerTxt}>\n            Dictionary App Offline\n          </Text>\n        </View>\n  \n        <View style={styles.inputAndBtnContainer}>\n          <TextInput\n          placeholder=\"Enter a word\"\n          style={styles.wordInput}\n          onChangeText={(text)=>{this.setState({wordInput: text})}}\n          />\n          <TouchableOpacity style={styles.defineBtn} onPress={() => {this.getDefinition(this.state.wordInput)}}>\n            <Text>\n              Define\n            </Text>\n          </TouchableOpacity>\n        </View>\n\n        {\n          (() =>\n          {\n            var r;\n            switch (this.state.loadState) {\n              case IDLE:\n                r = (() => (\n                  <View style={styles.wordDefinitionContainer}>\n                    <Text style={styles.wordDefTxtTitle}>\n                      Enter a word and its definition will show up here.\n                    </Text>\n                  </View>\n                ))()\n                break;\n              \n              case LOADING:\n                r = (() => (\n                  <View style={styles.wordDefinitionContainer}>\n                    <Text style={styles.wordDefTxtTitle}>\n                      Loading...\n                    </Text>\n                  </View>\n                ))()\n                break;\n              \n              case FOUND:\n                r = (() => (\n                  <View style={styles.wordDefinitionContainer}>\n\n                    <View style={styles.wordDefSection}>\n                      <Text style={styles.wordDefTxtTitle}>\n                        Word\n                      </Text>\n                      <Text style={styles.wordDefTxtContent}>\n                        {this.state.wordInfo.word}\n                      </Text>\n                    </View>\n\n                    <View style={styles.wordDefSection}>\n                      <Text style={styles.wordDefTxtTitle}>\n                        Type\n                      </Text>\n                      <Text style={styles.wordDefTxtContent}>\n                      {this.state.wordInfo.type}\n                      </Text>\n                    </View>\n\n                    <View style={styles.wordDefSection}>\n                      <Text style={styles.wordDefTxtTitle}>\n                        Definition\n                      </Text>\n                      <Text style={styles.wordDefTxtContent}>\n                      {this.state.wordInfo.definition}\n                      </Text>\n                    </View>\n                    \n                  </View>\n                ))()\n                break;\n              \n              case NOTFOUND:\n                r = (() => (\n                  <View style={styles.wordDefinitionContainer}>\n                    <Text style={styles.wordDefTxtTitle}>\n                      Word not found in local database.\n                    </Text>\n                    <Text style={styles.wordDefTxtContent}>\n                      Search \"all words\" to see a list of words in the local database.\n                    </Text>\n                  </View>\n                ))()\n                break;\n              \n              case ALLWORDS:\n                r = (() => (\n                  <View style={styles.wordDefinitionContainer}>\n                    <Text style={styles.wordDefTxtTitle}>\n                      All words in the local database:\n                    </Text>\n                    <Text style={styles.wordDefTxtContent}>\n                      {this.state.allWords.map((i) => (\n                        <Text key={\"allWords:\" + i} style={styles.wordDefTxtContent}>\n                          {\" - \" + i + \"\\n\"}\n                        </Text>\n                        ))\n                      }\n                    </Text>\n                  </View>\n                ))()\n                break;\n\n              default:\n                r = (() => (\n                  <View style={styles.wordDefinitionContainer}>\n                    <Text style={styles.wordDefTxtTitle}>\n                      Enter a word and its definition will show up here.\n                    </Text>\n                  </View>\n                ))()\n                break;\n            }\n            return r;\n          })()\n        }\n      </View>\n    );\n  }\n  \n  getDefinition = (word) =>\n  { \n    var w = word;\n    w = w.toLowerCase();\n    for (var i = 0; i < w.length; i++)\n    {\n      if (\"qwertyuiopasdfghjklzxcvbnm\".indexOf(w[i]) == -1)\n      {\n        w = w.replace(w[i], \"\");\n        i--;\n      }\n    }\n\n    if (w == \"allwords\")\n    {\n      this.setState({loadState: ALLWORDS});\n      return;\n    }\n\n    var wordStuff = db[w];\n    \n    if (!wordStuff)\n    {\n      this.setState({loadState: NOTFOUND});\n      return;\n    }\n    \n    \n    var word = wordStuff.word;\n    var type = wordStuff.lexicalCategory;\n    var definition = wordStuff.definition;\n\n    \n    this.setState({\n      wordInfo: {\n        word: word,\n        type: type,\n        definition: definition,\n      },\n      loadState: FOUND\n    });\n    \n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#fff',\n    alignItems: 'center',\n  },\n  header: {\n    width: \"100%\",\n    height: 100,\n    alignContent: 'center',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginBottom: 50,\n    backgroundColor: \"gray\"\n  },\n  headerTxt: {\n    textAlign: 'center',\n    fontSize: 30,\n    color: \"white\"\n  },\n  inputAndBtnContainer: {\n    alignItems: 'center',\n    width: 500,\n    maxWidth: \"80%\",\n    marginBottom: 20\n  },\n  wordInput: {\n    borderWidth: 2,\n    borderColor: \"gray\",\n    width: \"100%\",\n    textAlign: 'center',\n    height: 40,\n    marginBottom: 10,\n    borderRadius: 5\n  },\n  defineBtn: {\n    borderWidth: 2,\n    borderColor: \"black\",\n    width: \"20%\",\n    alignItems: 'center',\n    height: 30,\n    justifyContent: 'center',\n    borderRadius: 5\n  },\n  wordDefinitionContainer: {\n    width: 500,\n    maxWidth: \"90%\",\n    borderWidth: 4,\n    borderRadius: 10,\n    borderColor: \"gray\",\n    padding: 10\n  },\n  wordDefSection: {\n    width: \"100%\",\n    justifyContent: 'space-between',\n    marginVertical: 15\n  },\n  wordDefTxtTitle: {\n    color: \"#ff8300\",\n    fontWeight: 'bold',\n    fontSize: 20,\n  },\n  wordDefTxtContent: {\n    color: \"gray\",\n    fontWeight: 'bold',\n    fontSize: 20,\n  },\n  pronounceBtn: {\n    backgroundColor: \"#ff8300\",\n    width: 120,\n    height: 100,\n    maxWidth: \"70%\",\n    borderRadius: 10,\n    marginTop: 5,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  pronounceBtnTxt: {\n    color: \"white\",\n    fontWeight: 'bold',\n    fontSize: 24,\n    textAlign: 'center'\n  }\n});\n"],"sourceRoot":""}